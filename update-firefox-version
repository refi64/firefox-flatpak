#!/usr/bin/env python3
#
# update-firefox-version: A tool to generate extra-data entries in the
# manifest for the new Firefox version
#
# Copyright (C) 2017 Endless Mobile, Inc.
#
# Authors:
#       Joaquim Rocha <jrocha@endlessm.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

from html.parser import HTMLParser

import collections
import hashlib
import json
import os
import os.path
import sys
import urllib.error
import urllib.request


CURRENT_VERSION = '68.0.1'


ExtraDataInfo = collections.namedtuple('ExtraDataInfo', ['filename', 'url', 'sha256', 'size'])


def extra_data_info_encode(obj):
    return dict(type='extra-data', **obj._asdict())


class XpiPageParser(HTMLParser):
    def __init__(self):
        super(XpiPageParser, self).__init__()
        self.files = []

    def handle_starttag(self, tag, attrs):
        attr_dict = dict(attrs)
        if tag == 'a':
            href = attr_dict.get('href', '')
            if href.endswith('.xpi'):
                self.files.append(os.path.basename(href))

    @staticmethod
    def find_xpi_files(html):
        parser = XpiPageParser()
        parser.feed(html)
        return parser.files


class FirefoxJsonGenerator:
    JSON_FILE_NAME = 'firefox-sources.json'
    MOZILLA_ARCHIVE_URL = 'https://archive.mozilla.org/pub/firefox/releases/{version}/'
    MOZILLA_PLATFORM = 'linux-x86_64'
    MOZILLA_PLATFORM_URL = '{}{}/'.format(MOZILLA_ARCHIVE_URL, MOZILLA_PLATFORM)

    def __init__(self, version):
        self._version = version
        self._versioned_url = self.MOZILLA_ARCHIVE_URL.format(version=self._version)
        self._versioned_platform_url = self.MOZILLA_PLATFORM_URL.format(version=self._version)
        self._sha256 = {}

    def _load_sha256(self):
        '''Built a table of downloadable files and their SHA256 digests.'''
        url = '{}SHA256SUMS'.format(self._versioned_url)
        with urllib.request.urlopen(url) as response:
            sha256_table = response.read().decode()

        for line in sha256_table.splitlines():
            assert line.count('  ') == 1, line
            digest, filename = line.split('  ')

            if filename.startswith(self.MOZILLA_PLATFORM):
                assert filename.count('/') == 2, filename
                _, dirname, filename = filename.split('/')

                if dirname == 'en-US' or dirname == 'xpi':
                    self._sha256[filename] = digest

    def _get_extra_data_info(self, url):
        '''Fetches the extra data info for the given URL

        The extra data info fetched is the sha256 checksum, and size.
        This is needed together with the URL and name of the asset for
        the Flatpak json manifest.
        '''

        print('Fetching info for "{}"'.format(url))

        filename = os.path.basename(urllib.parse.urlparse(url).path)
        assert filename in self._sha256, filename
        sha256 = self._sha256[filename]

        with urllib.request.urlopen(url) as response:
            size = int(response.getheader('Content-Length'))

        return ExtraDataInfo(filename=filename, url=url, sha256=sha256, size=size)

    def _fetch_firefox_info(self):
        '''Fetches the info for this Firefox version.'''
        url = '{url}en-US/firefox-{version}.tar.bz2'.format(url=self._versioned_platform_url,
                                                            version=self._version)
        return self._get_extra_data_info(url)

    def _fetch_languages_info(self):
        '''Fetches the info for all the languages add-ons in this Firefox version.'''
        index_url = '{url}xpi/'.format(url=self._versioned_platform_url)
        languages_html = None
        info = []

        with urllib.request.urlopen(index_url) as response:
            xpi_html = response.read().decode()

        for xpi in XpiPageParser.find_xpi_files(xpi_html):
            xpi_url = index_url + xpi
            info.append(self._get_extra_data_info(xpi_url))

        return info

    def generate(self):
        '''
        Generate the firefox-sources.json file adding the extra-data for Firefox and its
        languages.
        '''

        self._load_sha256()

        extra_data_info = [self._fetch_firefox_info()] + self._fetch_languages_info()

        with open(self.JSON_FILE_NAME, 'w') as f:
            json.dump(list(map(extra_data_info_encode, extra_data_info)), f, indent=2)
            f.write('\n')

if __name__ == '__main__':
    generator = FirefoxJsonGenerator(CURRENT_VERSION)
    generator.generate()
